{"version":3,"sources":["utils/materialStyles.js","components/FormGateway.js","components/FormDevice.js","components/GatewayList.js","components/DeviceList.js","components/Management.js","App.js","serviceWorker.js","index.js"],"names":["materialStyles","theme","fontSize16","fontSize","textField","marginLeft","spacing","unit","marginRight","flexBasis","button","margin","leftIcon","withStyles","withSnackbar","props","classes","enqueueSnackbar","useState","valid","setValid","modify","setModify","errors","setErrors","name","setName","ip","setIp","insertHandler","a","axios","post","catch","error","response","data","message","variant","result","status","onSubmitEventHandler","modifyHandler","put","id","gatewayObject","_id","useEffect","errorInput","trim","_Is","ipv4","empty","object","style","display","flexWrap","Grid","container","item","xs","TextField","onChange","e","target","value","label","helperText","InputProps","className","Button","marginTop","color","disabled","onClick","vendor","setVendor","setStatus","submitHandler","gatewayId","isEmpty","classVendor","FormControlLabel","control","Switch","GatewayList","width","borderBottom","map","index","full_gateway","deviceCount","selected","key","background","IconButton","getDevices","Badge","badgeContent","invisible","DesktopMacRounded","addDevice","editDevice","Edit","removeGateway","Remove","DeviceList","Date","created","toDateString","removeDevice","currentGateway","setCurrentGateway","showForm","setShowform","formType","setFormType","list","setList","deviceList","setDeviceList","showDevices","setShowDevices","showFormHandler","gateway","loadGateways","get","then","info","loadDevices","length","editDeviceHandler","removeGatewayHandler","delete","removeDeviceHandler","GATEWAY_LIST","useMemo","DEVICE_LIST","Fragment","App","preventDuplicate","maxstack","anchorOrigin","vertical","horizontal","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAAaA,EAAiB,SAACC,GAAD,MAAY,CACtCC,WAAY,CAACC,SAAU,IACvBC,UAAW,CACPC,WAAYJ,EAAMK,QAAQC,KAC1BC,YAAaP,EAAMK,QAAQC,KAAME,UAAW,KAEhDC,OAAQ,CACJC,OAAQV,EAAMK,QAAQ,IAE1BM,SAAU,CACNJ,YAAaP,EAAMK,QAAQ,M,iBCkHpBO,cAAWb,EAAXa,CAA2BC,uBAnHtB,SAAAC,GAAU,IACnBC,EAA4BD,EAA5BC,QAASC,EAAmBF,EAAnBE,gBADS,EAECC,oBAAS,GAFV,mBAElBC,EAFkB,KAEXC,EAFW,OAGGF,oBAAS,GAHZ,mBAGlBG,EAHkB,KAGVC,EAHU,OAIGJ,mBAAS,IAJZ,mBAIlBK,EAJkB,KAIVC,EAJU,OAKDN,mBAAS,IALR,mBAKlBO,EALkB,KAKZC,EALY,OAMLR,mBAAS,IANJ,mBAMlBS,EANkB,KAMdC,EANc,KAuBnBC,EAAa,sCAAG,4BAAAC,EAAA,qEACGC,IAAMC,KAAK,WAAY,CACxCP,KAAMA,EAAME,GAAIA,IACjBM,MAAM,SAAAC,GACLjB,EAAgBiB,EAAMC,SAASC,KAAKC,QAAS,CAACC,QAAS,YAJzC,SACZC,EADY,SAOe,MAAlBA,EAAOC,QAAoC,MAAlBD,EAAOC,SAC3CvB,EAAgBsB,EAAOH,KAAKC,QAAS,CAACC,QAAS,YAC/ClB,GAAS,GACTM,EAAQ,IACRE,EAAM,IACNb,EAAM0B,wBAZQ,yCAAH,qDAgBbC,EAAa,sCAAG,4BAAAZ,EAAA,qEACGC,IAAMY,IAAI,WAAY,CACvClB,KAAMA,EAAME,GAAIA,EAAIiB,GAAI7B,EAAM8B,cAAcC,MAC7Cb,MAAM,SAAAC,GACLjB,EAAgBiB,EAAMC,SAASC,KAAKC,QAAS,CAACC,QAAS,YAJzC,SACZC,EADY,SAOe,MAAlBA,EAAOC,QAAoC,MAAlBD,EAAOC,SAC3CvB,EAAgBsB,EAAOH,KAAKC,QAAS,CAACC,QAAS,YAC/ClB,GAAS,GACTM,EAAQ,IACRE,EAAM,IACNb,EAAM0B,wBAZQ,yCAAH,qDAkCnB,OAXAM,oBAtDuB,WACnB,IAAMC,EAAa,GACC,KAAhBvB,EAAKwB,SACLD,EAAWvB,KAAO,0BAEJ,KAAdE,EAAGsB,OACHD,EAAWrB,GAAK,yBAEXuB,IAAIC,KAAKxB,KACVqB,EAAWrB,GAAK,qBAExBH,EAAUwB,GACV5B,EAAS8B,IAAIE,MAAMJ,KA0CG,CAACrB,EAAIF,IAE/BsB,oBAAU,WACeG,IAAIG,OAAOtC,EAAM8B,iBAElCnB,EAAQX,EAAM8B,cAAcpB,MAC5BG,EAAMb,EAAM8B,cAAclB,IAC1BL,GAAU,KAGf,CAACP,EAAM8B,gBAEN,0BAAMS,MAAO,CAACC,QAAS,OAAQC,SAAU,OAAQ7C,OAAQ,KACrD,2CACA,kBAAC8C,EAAA,EAAD,CAAMC,WAAS,EAACpD,QAAS,GACrB,kBAACmD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CACIlD,OAAO,QACPmD,SAAU,SAAAC,GAAC,OAAIrC,EAAQqC,EAAEC,OAAOC,QAChCC,MAAM,OACNhC,MAAOX,EAAOE,KACd0C,WAAY5C,EAAOE,KACnBwC,MAAOxC,EACP2C,WAAY,CAACC,UAAWrD,EAAQd,YAChCoC,QAAQ,cAGhB,kBAACmB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CACIlD,OAAO,QACPuB,MAAOX,EAAOI,GACdwC,WAAY5C,EAAOI,GACnBmC,SAAU,SAAAC,GAAC,OAAInC,EAAMmC,EAAEC,OAAOC,QAC9BC,MAAM,eACND,MAAOtC,EACPyC,WAAY,CAACC,UAAWrD,EAAQd,YAChCoC,QAAQ,cAIhB,kBAACmB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACU,EAAA,EAAD,CAAQhB,MAAO,CAACiB,UAAW,IAAKjC,QAAQ,YAAYkC,MAAM,UAAUC,UAAWtD,EACvEuD,QAjDF,WACbrD,EAGDqB,IAFAb,MAgDY,kBAAC,IAAD,CAAUwC,UAAWrD,EAAQJ,WAFjC,gB,2CCtCLC,cAAWb,EAAXa,CAA2BC,uBAjEvB,SAAAC,GAAU,IAClBC,EAA2BD,EAA3BC,QAAQC,EAAmBF,EAAnBE,gBADS,EAEEC,oBAAS,GAFX,mBAEjBC,EAFiB,KAEVC,EAFU,OAGIF,mBAAS,IAHb,mBAGjBK,EAHiB,KAGTC,EAHS,OAIIN,mBAAS,IAJb,mBAIjByD,EAJiB,KAITC,EAJS,OAKI1D,oBAAS,GALb,mBAKjBsB,EALiB,KAKTqC,EALS,KAiBlBC,EAAa,sCAAG,4BAAAhD,EAAA,qEACGC,IAAMC,KAAK,UAAW,CACvC2C,OAAQA,EAAQnC,OAAQA,EAAOuC,UAAUhE,EAAM8B,cAAcC,MAC9Db,MAAM,SAAAC,GACLjB,EAAgBiB,EAAMC,SAASC,KAAKC,QAAS,CAACC,QAAS,YAJzC,SACZC,EADY,SAMe,MAAlBA,EAAOC,QAAoC,MAAlBD,EAAOC,SAC3CvB,EAAgBsB,EAAOH,KAAKC,QAAS,CAACC,QAAS,YAC/ClB,GAAS,GACTyD,GAAU,GACVD,EAAU,IACV7D,EAAM0B,wBAXQ,yCAAH,qDAgBnB,OADAM,oBAzBuB,WACnB,IAAMC,EAAa,GACG,KAAlB2B,EAAO1B,SACPD,EAAW2B,OAAS,0BAGxBnD,EAAUwB,GACV5B,EAAS4D,kBAAQhC,KAkBK,CAAC2B,IAEvB,0BAAMrB,MAAO,CAACC,QAAS,OAAQC,SAAU,OAAQ7C,OAAQ,KACrD,0CAAgBI,EAAM8B,eAAiB,sCAAW,2BAAI9B,EAAM8B,cAAcpB,KAAxB,OAClD,kBAACgC,EAAA,EAAD,CAAMC,WAAS,EAACpD,QAAS,GACrB,kBAACmD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CACIlD,OAAO,QACPmD,SAAU,SAAAC,GAAC,OAAIa,EAAUb,EAAEC,OAAOC,QAClCC,MAAM,SACNhC,MAAOX,EAAOoD,OACdR,WAAY5C,EAAOoD,OACnBV,MAAOU,EACPP,WAAY,CAACa,YAAajE,EAAQd,YAClCoC,QAAQ,cAGhB,kBAACmB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACsB,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAQnB,MAAOzB,EAAQsB,SAAU,kBAAMe,GAAWrC,IAASgC,MAAM,YAC1EN,MAAM,SAASM,MAAM,aAG7B,kBAACf,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACU,EAAA,EAAD,CAAQhB,MAAO,CAACiB,UAAW,IAAKjC,QAAQ,YAAYkC,MAAM,UAAUC,UAAWtD,EAAOuD,QAASI,GAC3F,kBAAC,IAAD,CAAUG,YAAajE,EAAQJ,WADnC,gB,sDCDLyE,EAzDK,SAACtE,GACjB,OAAO,yBAAKsD,UAAU,gDAClB,2BAAOA,UAAU,kDACb,+BACA,wBAAIA,UAAU,4BACV,wBAAIA,UAAU,YAAYf,MAAO,CAACgC,MAAO,IAAKC,aAAc,sBAA5D,SACA,wBAAIlB,UAAU,YAAYf,MAAO,CAACgC,MAAO,IAAKC,aAAc,sBAA5D,MACA,wBAAIlB,UAAU,YAAYf,MAAO,CAACgC,MAAO,IAAKC,aAAc,sBAA5D,WACA,wBAAIlB,UAAU,YAAYf,MAAO,CAACgC,MAAO,IAAKC,aAAc,sBAA5D,aAGJ,+BACCxE,EAAMqB,KAAKoD,IAAI,SAAC7B,EAAM8B,GACnB,IAAMC,EAAe/B,EAAKgC,YAdvB,EAeGC,EAAWjC,IAAS5C,EAAM8B,cAC1BS,EAAQ,CAACkB,MAAOoB,EAAW,OAAS,IAC1C,OACI,wBAAIC,IAAKJ,EAAOnC,MAAO,CAACwC,WAAYF,EAAW,UAAY,KACvD,wBAAItC,MAAOA,GAAQK,EAAKlC,MACxB,wBAAI6B,MAAOA,GAAQK,EAAKhC,IACxB,wBAAI2B,MAAOA,GACP,kBAACyC,EAAA,EAAD,CAAYvB,MAAOkB,EAAe,UAAY,YAClChB,QAAS,kBAAM3D,EAAMiF,WAAWrC,KACxC,kBAACsC,EAAA,EAAD,CAAOC,aAAcvC,EAAKgC,YAAanB,MAAOkB,EAAe,UAAY,YAClES,UAAgC,IAArBxC,EAAKgC,aACnB,kBAACS,EAAA,EAAD,SAIZ,wBAAI9C,MAAOA,GACNoC,GAAgB,kBAACK,EAAA,EAAD,CAAYvB,MAAM,UACNE,QAAS,kBAAM3D,EAAMsF,UAAU1C,KACxD,kBAAC,IAAD,OAEJ,kBAACoC,EAAA,EAAD,CAAYvB,MAAM,UAAUE,QAAS,kBAAM3D,EAAMuF,WAAW3C,KACxD,kBAAC4C,EAAA,EAAD,OAEJ,kBAACR,EAAA,EAAD,CAAYvB,MAAM,YAAYE,QAAS,kBAAM3D,EAAMyF,cAAc7C,EAAKb,OAClE,kBAAC2D,EAAA,EAAD,eCPjBC,EAjCI,SAAC3F,GAChB,OAAO,yBAAKsD,UAAU,gDAClB,2BAAOA,UAAU,kDACb,+BACA,wBAAIA,UAAU,4BACV,wBAAIA,UAAU,YAAYf,MAAO,CAACgC,MAAO,IAAKC,aAAc,sBAA5D,WACA,wBAAIlB,UAAU,YAAYf,MAAO,CAACgC,MAAO,IAAKC,aAAc,sBAA5D,UACA,wBAAIlB,UAAU,YAAYf,MAAO,CAACgC,MAAO,IAAKC,aAAc,sBAA5D,WACA,wBAAIlB,UAAU,YAAYf,MAAO,CAACgC,MAAO,IAAKC,aAAc,sBAA5D,aAGJ,+BACCxE,EAAMqB,KAAKoD,IAAI,SAAC7B,EAAM8B,GAEnB,OACI,wBAAII,IAAKJ,GACL,4BAAK9B,EAAKgB,QACV,4BAAKhB,EAAKnB,OAAS,SAAW,WAC9B,4BAAK,IAAImE,KAAKhD,EAAKiD,SAASC,gBAC5B,4BACI,kBAACd,EAAA,EAAD,CAAYvB,MAAM,YAAYE,QAAS,kBAAM3D,EAAM+F,aAAanD,EAAKb,OACjE,kBAAC2D,EAAA,EAAD,e,mjBCdhC,IA8Ie5F,cAAWb,EAAXa,CAA2BC,uBA7InB,SAAAC,GAAU,IACtBC,EAA4BD,EAA5BC,QAASC,EAAmBF,EAAnBE,gBADY,EAEgBC,mBAAS,MAFzB,mBAErB6F,EAFqB,KAELC,EAFK,OAGI9F,oBAAS,GAHb,mBAGrB+F,EAHqB,KAGXC,EAHW,OAIIhG,oBAAS,GAJb,mBAIrBiG,EAJqB,KAIXC,EAJW,OAKJlG,mBAAS,IALL,mBAKrBmG,EALqB,KAKfC,EALe,OAMQpG,mBAAS,IANjB,mBAMrBqG,EANqB,KAMTC,EANS,OAOUtG,oBAAS,GAPnB,mBAOrBuG,EAPqB,KAORC,EAPQ,KAStBC,EAAkB,WAAqB,IAApBC,IAAmB,yDACxCV,GAAY,GACZE,EAAYQ,GACZJ,EAAc,IACdE,GAAe,IAmBbG,EAAe,WACjB9F,IAAM+F,IAAI,YAAYC,KAAK,SAAAC,GACvBV,EAAQU,EAAK5F,SAIf6F,EAAc,SAACL,GACbA,IAAYb,GACZC,EAAkBY,GACtB7F,IAAM+F,IAAI,WAAaF,EAAQ9E,KAAKiF,KAAK,SAAAC,GACrCN,GAAe,GACXM,EAAK5F,KAAK8F,OAAS,GACnBV,EAAcQ,EAAK5F,MACnB8E,EAAYc,EAAK5F,KAAK8F,OA9CnB,IAgDHV,EAAc,OAKpBW,EAAoB,SAAAP,GAEtBZ,EAAkBY,GAClBV,GAAY,GACZE,GAAY,IAGVgB,EAAoB,sCAAG,WAAMxF,GAAN,eAAAd,EAAA,qEACJC,IAAMsG,OAAO,YAAczF,GAAIX,MAAM,SAAAC,GACtDjB,EAAgBiB,EAAMC,SAASC,KAAKC,QAAS,CAACC,QAAS,YAFlC,SACnBC,EADmB,SAIQ,MAAlBA,EAAOC,QAAoC,MAAlBD,EAAOC,SAC3CqF,IACA5G,EAAgBsB,EAAOH,KAAKC,QAAS,CAACC,QAAS,YAC3CyE,GAAkBA,EAAejE,MAAQF,IACzC4E,EAAc,IACdE,GAAe,GACfR,GAAY,KAVK,yCAAH,sDAepBoB,EAAmB,sCAAG,WAAM1F,GAAN,iBAAAd,EAAA,qEACHC,IAAMsG,OAAQ,WAAazF,GAAIX,MAAM,SAAAC,GACtDjB,EAAgBiB,EAAMC,SAASC,KAAKC,QAAS,CAACC,QAAS,YAFnC,SAClBC,EADkB,SAIS,MAAlBA,EAAOC,QAAoC,MAAlBD,EAAOC,SAE3CvB,EAAgBsB,EAAOH,KAAKC,QAAS,CAACC,QAAS,YAC/CuF,IAEMD,EALsD,KAKxCb,GACpBkB,EAAYL,IAVQ,yCAAH,sDAgBnBW,EAAeC,kBAAQ,WAMzB,OACI,kBAAC,EAAD,CAAapG,KAAMiF,EAAMhB,UANJ,SAAAU,GACrBY,GAAgB,GAChBH,EAAc,IACdS,EAAYlB,IAG0ClE,cAAekE,EACxDf,WAAYiC,EAAazB,cAAe4B,EAAsB9B,WAAY6B,KAE5F,CAACd,EAAMN,EAAgBqB,IAEpBK,EAAcD,kBAAQ,WAExB,OAAO,kBAAC,EAAD,CAAYpG,KAAMmF,EAAYT,aAAcwB,KACpD,CAACf,IAIJ,OAFAxE,oBAAU8E,EAAc,IAGpB,kBAAC,IAAMa,SAAP,KACI,kBAACjF,EAAA,EAAD,CAAMC,WAAS,EAACpD,QAAS,GACrB,kBAACmD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACU,EAAA,EAAD,CAAQhB,MAAO,CAACiB,UAAW,IAAKjC,QAAQ,YAAYkC,MAAM,UAClDE,QAASiD,GACb,kBAAC,IAAD,CAAStD,UAAWrD,EAAQJ,WAFhC,YAMHuG,GAAYF,GACb,kBAACxD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAG,kBAAC,EAAD,CAAaf,cAAekE,EACftE,qBAzGZ,WAC3BoF,IACAX,GAAY,GACZQ,GAAe,GACfF,EAAc,SAuGV,kBAAC/D,EAAA,EAAD,CAAMC,WAAS,EAACpD,QAAS,GACrB,kBAACmD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI2E,GACnB,kBAAC9E,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACTuD,GAAYF,GACd,kBAAC,EAAD,CAAYpE,cAAekE,EAAgBtE,qBAvG7B,WAE1B,GADAoF,IACIJ,GAAeV,EAAgB,CAC/B,IAAM1D,EAAM,KAAO0D,GACnBkB,EAAY5E,OAqGHoE,GAAegB,QC5HrBE,G,OAbH,WACR,OACI,kBAAC,mBAAD,CAAkBC,kBAAgB,EAACC,SAAU,EAAGC,aAAc,CAC1DC,SAAU,MACVC,WAAY,UAEZ,kBAAC,IAAMN,SAAP,KACI,kBAAC,EAAD,UCAIO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC,gB","file":"static/js/main.872d3403.chunk.js","sourcesContent":["export const materialStyles = (theme) => ({\r\n    fontSize16: {fontSize: 16},\r\n    textField: {\r\n        marginLeft: theme.spacing.unit,\r\n        marginRight: theme.spacing.unit, flexBasis: 200,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    leftIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n})","import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _Is from 'is_js';\r\nimport {withSnackbar} from 'notistack';\r\nimport {Grid, TextField, Button, withStyles} from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport {materialStyles} from \"../utils/materialStyles\";\r\nimport axios from \"axios\";\r\n\r\nconst FormGateway = props => {\r\n    const {classes, enqueueSnackbar} = props;\r\n    const [valid, setValid] = useState(false);\r\n    const [modify, setModify] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [name, setName] = useState(\"\");\r\n    const [ip, setIp] = useState(\"\");\r\n\r\n    const isValidHandler = () => {\r\n        const errorInput = {};\r\n        if (name.trim() === \"\") {\r\n            errorInput.name = \"This field is required\";\r\n        }\r\n        if (ip.trim() === \"\") {\r\n            errorInput.ip = \"This field is required\";\r\n        } else {\r\n            if (!_Is.ipv4(ip))\r\n                errorInput.ip = \"Wrong IPv4 Format\";\r\n        }\r\n        setErrors(errorInput);\r\n        setValid(_Is.empty(errorInput));\r\n    }\r\n\r\n    const insertHandler = async () => {\r\n        const result = await axios.post('/gateway', {\r\n            name: name, ip: ip\r\n        }).catch(error => {\r\n            enqueueSnackbar(error.response.data.message, {variant: 'error'});\r\n        });\r\n\r\n        if (result && (result.status === 200 || result.status === 201)) {\r\n            enqueueSnackbar(result.data.message, {variant: 'success'});\r\n            setValid(false);\r\n            setName(\"\");\r\n            setIp(\"\");\r\n            props.onSubmitEventHandler();\r\n        }\r\n    }\r\n\r\n    const modifyHandler = async () => {\r\n        const result = await axios.put('/gateway', {\r\n            name: name, ip: ip, id: props.gatewayObject._id\r\n        }).catch(error => {\r\n            enqueueSnackbar(error.response.data.message, {variant: 'error'});\r\n        });\r\n\r\n        if (result && (result.status === 200 || result.status === 201)) {\r\n            enqueueSnackbar(result.data.message, {variant: 'success'});\r\n            setValid(false);\r\n            setName(\"\");\r\n            setIp(\"\");\r\n            props.onSubmitEventHandler();\r\n        }\r\n    }\r\n\r\n    const submitHandler = () => {\r\n        if (!modify)\r\n            insertHandler();\r\n        else\r\n            modifyHandler();\r\n    }\r\n\r\n    useEffect(isValidHandler, [ip, name])\r\n\r\n    useEffect(() => {\r\n        const actionModify = _Is.object(props.gatewayObject);\r\n        if (actionModify) {\r\n            setName(props.gatewayObject.name);\r\n            setIp(props.gatewayObject.ip);\r\n            setModify(true);\r\n        }\r\n\r\n    }, [props.gatewayObject])\r\n    return (\r\n        <form style={{display: 'flex', flexWrap: 'wrap', margin: 25}}>\r\n            <h4>ADD GATEWAY</h4>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        onChange={e => setName(e.target.value)}\r\n                        label=\"Name\"\r\n                        error={errors.name}\r\n                        helperText={errors.name}\r\n                        value={name}\r\n                        InputProps={{className: classes.fontSize16}}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        error={errors.ip}\r\n                        helperText={errors.ip}\r\n                        onChange={e => setIp(e.target.value)}\r\n                        label=\"IPv4 Address\"\r\n                        value={ip}\r\n                        InputProps={{className: classes.fontSize16}}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <Button style={{marginTop: 10}} variant=\"contained\" color=\"primary\" disabled={!valid}\r\n                            onClick={submitHandler}>\r\n                        <SaveIcon className={classes.leftIcon}/>Submit\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    )\r\n}\r\n\r\nFormGateway.propTypes = {onSubmitEventHandler: PropTypes.func.isRequired, gatewayObject: PropTypes.any}\r\n\r\nexport default withStyles(materialStyles)(withSnackbar(FormGateway));","import React, {useState, useEffect} from 'react';\r\nimport {isEmpty} from 'lodash';\r\nimport {Grid, TextField, Button, FormControlLabel, Switch, withStyles} from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport {materialStyles} from \"../utils/materialStyles\";\r\nimport axios from 'axios';\r\nimport PropTypes from \"prop-types\";\r\nimport {withSnackbar} from \"notistack\";\r\n\r\nconst FormDevice = props => {\r\n    const {classes,enqueueSnackbar} = props;\r\n    const [valid, setValid] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [vendor, setVendor] = useState(\"\");\r\n    const [status, setStatus] = useState(false);     // TRUE ONLINE & FALSE OFFLINE\r\n\r\n    const isValidHandler = () => {\r\n        const errorInput = {};\r\n        if (vendor.trim() === \"\") {\r\n            errorInput.vendor = \"This field is required\";\r\n        }\r\n\r\n        setErrors(errorInput);\r\n        setValid(isEmpty(errorInput));\r\n    }\r\n\r\n    const submitHandler = async () => {\r\n        const result = await axios.post('/device', {\r\n            vendor: vendor, status: status,gatewayId:props.gatewayObject._id\r\n        }).catch(error => {\r\n            enqueueSnackbar(error.response.data.message, {variant: 'error'});\r\n        });\r\n        if (result && (result.status === 200 || result.status === 201)) {\r\n            enqueueSnackbar(result.data.message, {variant: 'success'});\r\n            setValid(false);\r\n            setStatus(false);\r\n            setVendor(\"\");\r\n            props.onSubmitEventHandler();\r\n        }\r\n    }\r\n\r\n    useEffect(isValidHandler, [vendor])\r\n    return (\r\n        <form style={{display: 'flex', flexWrap: 'wrap', margin: 25}}>\r\n            <h4>ADD DEVICE {props.gatewayObject && <span> TO  <i>{props.gatewayObject.name} </i></span>}</h4>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        onChange={e => setVendor(e.target.value)}\r\n                        label=\"Vendor\"\r\n                        error={errors.vendor}\r\n                        helperText={errors.vendor}\r\n                        value={vendor}\r\n                        InputProps={{classVendor: classes.fontSize16}}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <FormControlLabel\r\n                        control={<Switch value={status} onChange={() => setStatus(!status)} color=\"primary\"/>}\r\n                        label=\"Status\" color=\"primary\"/>\r\n\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <Button style={{marginTop: 10}} variant=\"contained\" color=\"primary\" disabled={!valid} onClick={submitHandler}>\r\n                        <SaveIcon classVendor={classes.leftIcon}/>Submit\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    )\r\n}\r\nFormDevice.propTypes = {onSubmitEventHandler: PropTypes.func.isRequired, gatewayObject: PropTypes.object}\r\nexport default withStyles(materialStyles)(withSnackbar(FormDevice));","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport {Add, Remove, Edit, DesktopMacRounded} from '@material-ui/icons';\r\n\r\nconst MAX_DEVICE = 5;\r\nconst GatewayList = (props) => {\r\n    return <div className=\"table-scrollable table-scrollable-borderless\">\r\n        <table className=\"table table-light table-striped table-bordered\">\r\n            <thead>\r\n            <tr className=\"uppercase bold text-left\">\r\n                <th className=\"text-left\" style={{width: 180, borderBottom: \"1px solid #1c9e8a\"}}> Name</th>\r\n                <th className=\"text-left\" style={{width: 180, borderBottom: \"1px solid #1c9e8a\"}}>IP</th>\r\n                <th className=\"text-left\" style={{width: 100, borderBottom: \"1px solid #1c9e8a\"}}>Devices</th>\r\n                <th className=\"text-left\" style={{width: 180, borderBottom: \"1px solid #1c9e8a\"}}>Options</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {props.data.map((item, index) => {\r\n                const full_gateway = item.deviceCount < MAX_DEVICE;\r\n                const selected = item === props.gatewayObject;\r\n                const style = {color: selected ? \"#fff\" : \"\"};\r\n                return (\r\n                    <tr key={index} style={{background: selected ? \"#3598DC\" : \"\"}}>\r\n                        <td style={style}>{item.name}</td>\r\n                        <td style={style}>{item.ip}</td>\r\n                        <td style={style}>\r\n                            <IconButton color={full_gateway ? 'primary' : \"secondary\"}\r\n                                        onClick={() => props.getDevices(item)}>\r\n                                <Badge badgeContent={item.deviceCount} color={full_gateway ? 'primary' : \"secondary\"}\r\n                                       invisible={item.deviceCount === 0}>\r\n                                    <DesktopMacRounded/>\r\n                                </Badge>\r\n                            </IconButton>\r\n                        </td>\r\n                        <td style={style}>\r\n                            {full_gateway && <IconButton color=\"primary\"\r\n                                                         onClick={() => props.addDevice(item)}>\r\n                                <Add/>\r\n                            </IconButton>}\r\n                            <IconButton color=\"primary\" onClick={() => props.editDevice(item)}>\r\n                                <Edit/>\r\n                            </IconButton>\r\n                            <IconButton color=\"secondary\" onClick={() => props.removeGateway(item._id)}>\r\n                                <Remove/>\r\n                            </IconButton>\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            })\r\n            }\r\n            </tbody>\r\n        </table>\r\n    </div>;\r\n}\r\nGatewayList.propTypes = {\r\n    data: PropTypes.array.isRequired,\r\n    addDevice: PropTypes.func.isRequired,\r\n    editDevice: PropTypes.func.isRequired,\r\n    getDevices: PropTypes.func.isRequired,\r\n    removeGateway: PropTypes.func.isRequired,\r\n    gatewayObject: PropTypes.any\r\n}\r\nexport default GatewayList;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Remove} from '@material-ui/icons';\r\n\r\nconst DeviceList = (props) => {\r\n    return <div className=\"table-scrollable table-scrollable-borderless\">\r\n        <table className=\"table table-light table-striped table-bordered\">\r\n            <thead>\r\n            <tr className=\"uppercase bold text-left\">\r\n                <th className=\"text-left\" style={{width: 180, borderBottom: \"1px solid #1c9e8a\"}}> Vendor</th>\r\n                <th className=\"text-left\" style={{width: 180, borderBottom: \"1px solid #1c9e8a\"}}>Status</th>\r\n                <th className=\"text-left\" style={{width: 180, borderBottom: \"1px solid #1c9e8a\"}}>Created</th>\r\n                <th className=\"text-left\" style={{width: 180, borderBottom: \"1px solid #1c9e8a\"}}>Options</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {props.data.map((item, index) => {\r\n\r\n                return (\r\n                    <tr key={index}>\r\n                        <td>{item.vendor}</td>\r\n                        <td>{item.status ? \"Online\" : \"Offline\"}</td>\r\n                        <td>{new Date(item.created).toDateString()}</td>\r\n                        <td>\r\n                            <IconButton color=\"secondary\" onClick={() => props.removeDevice(item._id)}>\r\n                                <Remove/>\r\n                            </IconButton>\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            })\r\n            }\r\n            </tbody>\r\n        </table>\r\n    </div>;\r\n}\r\nDeviceList.propTypes = {data: PropTypes.array.isRequired, removeDevice: PropTypes.func.isRequired}\r\nexport default DeviceList;","import React, {useState, useEffect, useMemo} from 'react';\r\nimport {Button, Grid, withStyles} from '@material-ui/core';\r\nimport FormGateway from \"./FormGateway\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport {materialStyles} from \"../utils/materialStyles\";\r\nimport FormDevice from \"./FormDevice\";\r\nimport axios from \"axios\";\r\nimport GatewayList from \"./GatewayList\";\r\nimport DeviceList from \"./DeviceList\";\r\nimport {withSnackbar} from \"notistack\";\r\n\r\n\r\nconst MAX_DEVICE = 5;\r\nconst ManagementList = props => {\r\n    const {classes, enqueueSnackbar} = props;\r\n    const [currentGateway, setCurrentGateway] = useState(null);\r\n    const [showForm, setShowform] = useState(false);\r\n    const [formType, setFormType] = useState(false);  // TRUE IF ADD GATEWAY & FALSE IF ADD DEVICE\r\n    const [list, setList] = useState([]);\r\n    const [deviceList, setDeviceList] = useState([]);\r\n    const [showDevices, setShowDevices] = useState(false);\r\n\r\n    const showFormHandler = (gateway = true) => {\r\n        setShowform(true);\r\n        setFormType(gateway);\r\n        setDeviceList([]);\r\n        setShowDevices(false);  \r\n    }\r\n\r\n    const onSubmitGatewayHandler = () => {\r\n        loadGateways();\r\n        setShowform(false);\r\n        setShowDevices(false);\r\n        setDeviceList([]);\r\n\r\n    }\r\n\r\n    const onSubmitDeviceHandler = () => {\r\n        loadGateways();\r\n        if (showDevices && currentGateway) {\r\n            const object = {...currentGateway}\r\n            loadDevices(object)\r\n        }\r\n    }\r\n\r\n    const loadGateways = () => {\r\n        axios.get('/gateway').then(info => {\r\n            setList(info.data)\r\n        });\r\n    }\r\n\r\n    const loadDevices = (gateway) => {\r\n        if (gateway !== currentGateway)\r\n            setCurrentGateway(gateway);\r\n        axios.get('/device/' + gateway._id).then(info => {\r\n            setShowDevices(true);\r\n            if (info.data.length > 0) {\r\n                setDeviceList(info.data);\r\n                setShowform(info.data.length < MAX_DEVICE);\r\n            } else {\r\n                setDeviceList([]);\r\n            }\r\n        });\r\n    }\r\n\r\n    const editDeviceHandler = gateway => {\r\n\r\n        setCurrentGateway(gateway);\r\n        setShowform(true);\r\n        setFormType(true);\r\n    }\r\n\r\n    const removeGatewayHandler = async id => {\r\n        const result = await axios.delete('/gateway/' + id).catch(error => {\r\n            enqueueSnackbar(error.response.data.message, {variant: 'error'});\r\n        });\r\n        if (result && (result.status === 200 || result.status === 201)) {\r\n            loadGateways();\r\n            enqueueSnackbar(result.data.message, {variant: 'success'});\r\n            if (currentGateway && currentGateway._id === id) {\r\n                setDeviceList([]);\r\n                setShowDevices(false);\r\n                setShowform(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const removeDeviceHandler = async id => {\r\n        const result = await axios.delete( '/device/' + id).catch(error => {\r\n            enqueueSnackbar(error.response.data.message, {variant: 'error'});\r\n        });\r\n        if (result && (result.status === 200 || result.status === 201)) {\r\n\r\n            enqueueSnackbar(result.data.message, {variant: 'success'});\r\n            loadGateways();\r\n            // if (currentGateway && currentGateway._id === id) {\r\n            const gateway = {...currentGateway};\r\n            loadDevices(gateway);\r\n            // }\r\n        }\r\n    }\r\n\r\n\r\n    const GATEWAY_LIST = useMemo(() => {\r\n        const addDeviceHandler = currentGateway => {\r\n            showFormHandler(false);\r\n            setDeviceList([]);\r\n            loadDevices(currentGateway);\r\n        }\r\n        return (\r\n            <GatewayList data={list} addDevice={addDeviceHandler} gatewayObject={currentGateway}\r\n                         getDevices={loadDevices} removeGateway={removeGatewayHandler} editDevice={editDeviceHandler}/>\r\n        )\r\n    }, [list, currentGateway, removeGatewayHandler])\r\n\r\n    const DEVICE_LIST = useMemo(() => {\r\n\r\n        return <DeviceList data={deviceList} removeDevice={removeDeviceHandler}/>\r\n    }, [deviceList])\r\n\r\n    useEffect(loadGateways, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={1}>\r\n                    <Button style={{marginTop: 10}} variant=\"contained\" color=\"primary\"\r\n                            onClick={showFormHandler}>\r\n                        <AddIcon className={classes.leftIcon}/>\r\n                        Gateway\r\n                    </Button>\r\n                </Grid>\r\n                {formType && showForm &&\r\n                <Grid item xs={5}><FormGateway gatewayObject={currentGateway}\r\n                                               onSubmitEventHandler={onSubmitGatewayHandler}/></Grid>}\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={6}>{GATEWAY_LIST}</Grid>\r\n                <Grid item xs={6}>\r\n                    {!formType && showForm &&\r\n                    <FormDevice gatewayObject={currentGateway} onSubmitEventHandler={onSubmitDeviceHandler}/>\r\n                    }\r\n                    {showDevices && DEVICE_LIST}\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {/*{showForm && <Grid item xs={5}>*/}\r\n            {/*{formType ? <FormGateway onSubmitEventHandler={onSubmitGatewayHandler}/> :*/}\r\n            {/*<FormDevice gatewayObject={currentGateway} onSubmitEventHandler={onSubmitDeviceHandler}/>}*/}\r\n            {/*</Grid>}*/}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default withStyles(materialStyles)(withSnackbar(ManagementList));","import React from 'react';\nimport Managemment from './components/Management';\nimport {SnackbarProvider} from \"notistack\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App = () => {\n    return (\n        <SnackbarProvider preventDuplicate maxstack={1} anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n        }}>\n            <React.Fragment>\n                <Managemment/>\n            </React.Fragment>\n        </SnackbarProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}